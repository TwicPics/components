/* eslint-disable no-console */
import __dirname from "../__dirname.js";
import { getAngularDirectories, getJsonFromFile } from "./angularUtils.js";
import rollup from "../rollup.js";
import { gitHubRootPath } from "../utils/gitHubUtils.js";
import { execSync } from "child_process";
import { readFile, writeFile } from "fs/promises";
import { copy, remove } from "fs-extra";
import path from "path";
import replaceInFile from "replace-in-file";
import dts from "rollup-plugin-dts";
import uglify from "uglify-js";

/**
 * returns dist folder paths
 * twicDist : final dist folder related to current angular project
 * ngcDist : legacy dist folder (generated by ng build process)
 * @param {*} angularDirectory : current angular project informations
 */
const getDistFolder = angularDirectory => ( {
    "twicDist": `${ __dirname }/../dist/${ angularDirectory.name }`,
    "ngcDist": `${ angularDirectory.path }/dist`,
} );

/**
 * extracts exports data from generated package.json
 * looking for attributs module, main, typings, esXXXX, fesmXXXX
 * @param {*} angularDirectory : current angular project informations
 * @param {*} declaration : <true> considers type definition exports, <false> considers other exports
 */
const getExportsMappings = async ( angularDirectory, declaration ) => {
    // read package.json generated by ng build
    const { ngcDist } = getDistFolder( angularDirectory );
    const packageJson = await getJsonFromFile( `${ ngcDist }/package.json` );
    let regExp;
    if ( declaration ) {
        regExp = /^(typings)$/;
    } else {
        regExp = /^(module)|(main)|(((fesm)|(es))[0-9]+)$/;
    }
    return Object.keys( packageJson ).filter( key => key.match( regExp ) )
        .map( key => ( {
            key,
            "source": `${ packageJson[ key ] }`,
            "destination": declaration ?
                `${ packageJson[ key ] }` :
                `${ key }${ path.extname( `${ packageJson[ key ] }` ) }`,
        } ) );
};

/**
 * get list of angular library to build for the given angularDirectory
 * It is possible to have n libraries in an angular project defined by it's angularDirectory
 * @param angularDirectory
 * @returns {Promise<null|*[]>}
 */
const getProjectsByDirectory = async angularDirectory => {

    const projectsByDirectory = [];
    const angularJson = await getJsonFromFile( angularDirectory.angularJsonPath );

    if ( !angularJson ) {
        return null;
    }
    // for each project defined in angular.json
    Object.keys( angularJson.projects ).forEach( projectName => {
        projectsByDirectory.push( {
            projectName,
            "project": angularJson.projects[ projectName ],
        } );
    } );

    // return only library project
    return projectsByDirectory.filter( angularProject => angularProject.project.projectType === `library` );
};

/**
 * minification of generated js files
 * @param {*} angularDirectory : current angular project informations
 */
const minify = async angularDirectory => {
    const { twicDist, ngcDist } = getDistFolder( angularDirectory );
    // array of reference sources
    const references = [];
    const mappings = await getExportsMappings( angularDirectory );

    for await ( const mapping of mappings ) {
        const { source, destination } = mapping;
        // for the given mapping, looks if a reference already exists in references
        const reference = references.find( r => r && ( r.source === source ) );
        let ref;
        if ( reference ) {
            // reference exists --> we'll point to it
            ref = {
                "code": `export*from'./${ reference.destination }';`,
            };
        } else {
            // add this mapping to references list
            references.push( mapping );
        }

        const { code, map, error } = ref ?? uglify.minify(
            await readFile( `${ ngcDist }/${ source }`, `utf8` ),
            {
                "mangle": false,
                "compress": true,
                "sourceMap": {
                    "url": `${ destination }.map`,
                    "content": await readFile( `${ ngcDist }/${ source }.map`, `utf8` ),
                },
            }
        );

        if ( error ) {
            console.error( `Error occurred while minification :`, error );
        } else {
            const filesToWrite = [
                {
                    "path": `${ twicDist }/${ destination }`,
                    "content": code,
                },
            ];
            if ( map ) {
                filesToWrite.push( {
                    "path": `${ twicDist }/${ destination }.map`,
                    "content": map,
                } );
            }

            await Promise.all( filesToWrite.map( f => writeFile( f.path, f.content ) ) );
        }
    }
};

/**
 * generated source maps uses relative source path
 * here transformation to point to github sources
 */
const sourcemapPathTransform = async angularDirectory => {
    const { ngcDist } = getDistFolder( angularDirectory );
    // commons sources
    let replaceOptions = {
        "files": `${ ngcDist }/**/*.map`,
        "from": /..\/..\/twicpics-components\/src\/_\//g,
        "to": `${ gitHubRootPath }/src/_/`,
    };
    await replaceInFile( replaceOptions );

    // angular sources
    replaceOptions = {
        "files": `${ ngcDist }/**/*.map`,
        "from": /..\/..\/twicpics-components\/src\//g,
        "to": `${ gitHubRootPath }/src/angular/`,
    };
    await replaceInFile( replaceOptions );

};

/**
 * rollup definitions type related to current angular project
 * @param {*} angularDirectory : current angular project informations
 */
const typeDefinitions = async angularDirectory => {
    const { twicDist, ngcDist } = getDistFolder( angularDirectory );

    // rollup generated index.d.ts
    await rollup( {
        "input": `${ ngcDist }/index.d.ts`,
        "output": [
            {
                "file": `${ twicDist }/index.d.ts`,
                "format": `es`,
            },
        ],
        "plugins": [ dts() ],
    } );

    // copy original twicpics-components.d.ts
    await copy( `${ ngcDist }/twicpics-components.d.ts`, `${ twicDist }/twicpics-components.d.ts` );
};

/**
 * build the angular library named projectName
 * 0 - remove old source from previous build
 * 1 - copy source from master to library project to build
 * 2 - change imports in library project to build
 * 3 - copy common directory (_) to library project to build
 * 4 - launch official ng build
 * 5 - replace FRAMEWORK by ANGULAR in build library
 * 6 - apply sourcemap transform (to point to github)
 * 7 - clean working directory
 * 8 - rollup d.t
 * 9 - minify bundles
 * @param angularDirectory : directory of related project to build
 * @param angularConfig : config of angular projet to build
 * @returns {Promise<void>}
 */
const buildAngularProject = async ( angularDirectory, angularConfig ) => {
    const { sourceRoot } = angularConfig.project;
    const { ngcDist } = getDistFolder( angularDirectory );
    const libraryName = ` ${ angularConfig.projectName }/${ angularDirectory.name }`;
    const masterDestinationPath = `${ angularDirectory.path }/${ sourceRoot }/`;

    console.log( `Building ${ libraryName }` );

    // 0 - remove old source from previous build
    await remove( masterDestinationPath );

    // 1 - copy source from master to library project to build
    const masterSourcePath = `${ __dirname }/../src/angular/`;
    await copy( masterSourcePath, masterDestinationPath );

    // 2 - change imports in library project to build
    let replaceOptions = {
        "files": `${ masterDestinationPath }/**/*.*`,
        "from": /\.\.\/_\//g,
        "to": `./_/`,
    };
    try {
        await replaceInFile( replaceOptions );
    } catch ( error ) {
        console.error( `Angular replacement error occurred:`, error );
    }

    // 3 - copy common directory (_) to library project to build
    const commonSourcePath = `${ __dirname }/../src/_`;
    const commonDestinationPath = `${ masterDestinationPath }_`;
    await copy( commonSourcePath, commonDestinationPath );

    // 4 - launch official ng build
    execSync( `cd ${ angularDirectory.path } && npx ng build ${ angularConfig.projectName }` );

    // 5 - replace FRAMEWORK by ANGULAR in built library
    replaceOptions = {
        "files": `${ ngcDist }/**/*.*`,
        "from": /\bFRAMEWORK([^:])/g,
        "to": `'ANGULAR'`,
    };

    try {
        await replaceInFile( replaceOptions );
    } catch ( error ) {
        console.error( `Angular replacemeny error occurred:`, error );
    }

    // 6 - apply sourcemap transform (to point to github)
    await sourcemapPathTransform( angularDirectory );

    // 7 - clean working directory
    // remove tmp source
    await remove( masterDestinationPath );

    // 8 - rollup d.ts
    await typeDefinitions( angularDirectory );

    // 9 - minify bundles
    await minify( angularDirectory );

    console.log( `${ libraryName } built` );
};

/**
 * angular build processing
 * For each angular library to build, call buildAngularProject
 * @returns {Promise<void>}
 */
export const buildComponents = async () => {
    // retreive angular directories containing a library to build
    const angularDirectories = await getAngularDirectories();
    // loop on angular directories
    for await ( const angularDirectory of angularDirectories ) {
        // retreive angular projects to build within given angularDirectory
        const angularProjects = await getProjectsByDirectory( angularDirectory );
        if ( angularProjects ) {
            // loop on angular projects to build
            for await ( const project of angularProjects ) {
                await buildAngularProject( angularDirectory, project );
            }
        } else {
            console.warn( `No angular configuration for ${ angularDirectory.name }` );
        }
    }
};

/**
 * generate and return exports attributes to be add to generated package.json
 */
export const exportsPackageJson = async () => {
    const exports = new Map();

    // retreive angular directories containing a library to build
    const angularDirectories = await getAngularDirectories();

    // loop on angular directories
    for await ( const angularDirectory of angularDirectories ) {
        const angularName = angularDirectory.name;
        const mappingsJs = await getExportsMappings( angularDirectory, false );
        const mappingsDeclaration = await getExportsMappings( angularDirectory, true );
        const extractedExportsData = {};

        mappingsJs.forEach( mapping => {
            const { key, destination } = mapping;
            extractedExportsData[ key ] = `./${ angularName }/${ destination }`;
        } );

        mappingsDeclaration.forEach( mapping => {
            const { key, destination } = mapping;
            extractedExportsData[ key ] = `./${ angularName }/${ destination }`;
        } );

        exports.set( `./${ angularName }`, extractedExportsData );
    }
    return exports;
};

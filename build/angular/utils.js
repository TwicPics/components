/* eslint-disable no-console */
import __dirname from "../__dirname.js";
import { readdir } from "fs/promises";
import { getJsonFromPath } from "../json.js";

/**
 * root directory for angular projects to build
 * Contains one subfolder by supported angular version
 */
const angularTemplatesPath = `${ __dirname }/angular/_templates/`;

/**
 * get list of angular project directories
 * return only directories that starts with angular+versionNumber
 * eg : angular12, angular13...
 * @return array
 */
export const getAngularDirectories = async () =>
    ( await readdir( angularTemplatesPath, {
        'withFileTypes': true,
    } ) )
        // only directories
        .filter( dirent => dirent.isDirectory() )
        // only directories named angular + versionNumber
        .filter( dirent => dirent.name.match( /angular[0-9]+$/ ) )
        .map( dirent => {
            const obj = {
                "name": dirent.name,
                "path": `${ angularTemplatesPath }${ dirent.name }`,
                "angularJsonPath": `${ angularTemplatesPath }${ dirent.name }/angular.json`,
                "packageJsonPath": `${ angularTemplatesPath }${ dirent.name }/lib/package.json`,
            };
            return obj;
        } );

/**
 * get list of angular library to build for the given angularDirectory
 * It is possible to have n libraries in an angular project defined by it's angularDirectory
 * @param angularDirectory
 * @returns {Promise<null|*[]>}
 */
export const getProjectsByDirectory = async angularDirectory => {

    const projectsByDirectory = [];
    const angularJson = await getJsonFromPath( angularDirectory.angularJsonPath );

    if ( !angularJson ) {
        return null;
    }
    // for each project defined in angular.json
    Object.keys( angularJson.projects ).forEach( projectName => {
        projectsByDirectory.push( {
            projectName,
            "project": angularJson.projects[ projectName ],
        } );
    } );

    // return only library project
    return projectsByDirectory.filter( angularProject => angularProject.project.projectType === `library` );
};

/**
* returns dist folder paths
* twicDist : final dist folder related to current angular project
* ngcDist : legacy dist folder (generated by ng build process)
* @param {*} angularDirectory : current angular project informations
*/
export const getDistFolder = angularDirectory => ( {
    "twicDist": `${ __dirname }/../dist/${ angularDirectory.name }`,
    "ngcDist": `${ angularDirectory.path }/dist`,
} );

/**
 * base component
 * Used in twic-img and twic-video
 */
import {
    Component,
    ElementRef,
    Input,
    OnDestroy,
    OnInit,
    ViewChild,
} from "@angular/core";

import type { Mode, Placeholder } from "../_/types";

import {
    computeData,
    computeStyle,
    computeWrapperClass,
    computeWrapperStyle,
} from "../_/compute";

import { createPlaceholderHandler, PlaceholderHandler } from "../_/placeholder";

import {
    parseBot,
    parseFocus,
    parseMode,
    parsePlaceholder,
    parsePosition,
    parseRatio,
    parseSrc,
    parseStep,
    parseTransition,
    parseTransitionDelay,
    parseTransitionDuration,
    parseTransitionTimingFunction,
} from "../_/parse";

@Component( {
    "selector": `lib-twic-base`,
    "template": `<p>To implement in child class</p>`,
} )
export class TwicBaseComponent implements OnInit, OnDestroy {

    @Input() alt: string = undefined;
    @Input() bot: string = undefined;
    @Input() focus: string = undefined;
    @Input() mode: Mode = undefined;
    @Input() placeholder: Placeholder = undefined;
    @Input() position: string = undefined;
    @Input() ratio: number | string = undefined;
    @Input() src: string;
    @Input() step: number = undefined;
    @Input() transition:boolean | string;
    @Input() transitionDelay: string = undefined;
    @Input() transitionDuration: string = undefined;
    @Input() transitionTimingFunction: string = undefined;
    /**
     * to access to the div generated by render method
     * <div #wrapper>...</div>
     * static set to true because we want access on ngOnInit
     */
    @ViewChild( `wrapper`, {
        "static": true,
    } ) wrapperElementRef!: ElementRef;
    /**
     * effective wrapper div element (this.wrapperElement.nativeElement)
     */
    wrapper: HTMLDivElement;
    /**
     * wrapper management object
     */
    _p: PlaceholderHandler;
    /**
     * wrapper style
     * Allows background image management (mode, placeholder, position and background image ratio)
     */
    wrapperStyle: Record<string, string>;
    constructor() {
        this._p = createPlaceholderHandler();
    }
    // eslint-disable-next-line class-methods-use-this
    getWrapperClass(): string {
        return computeWrapperClass();
    }
    /**
     * compute and return element's (img or video) attributes
     * attributes are recomputed on dom element modification (size or attributes)
     */
    getElementAttributes(): Record<string, string> {
        return {
            ...computeData(
                parseBot( this.bot ),
                parseFocus( this.focus ),
                parseSrc( this.src ),
                parseStep( this.step )
            ),
        };
    }
    /**
     * compute and return element's (img or video) style
     * style are recomputed on dom element modification (size or attributes)
     */
    getElementStyle(): Record<string, string> {
        return computeStyle(
            parseMode( this.mode ),
            parsePosition( this.position ),
            parseTransition( this.transition ),
            parseTransitionDelay( this.transitionDelay ),
            parseTransitionDuration( this.transitionDuration ),
            parseTransitionTimingFunction( this.transitionTimingFunction )
        );
    }
    /**
     * compute wrapper initial style and instance storage
     * we don't want to recompute wrapper style on dom modification
     * Recomputing is delegated to size observer
     */
    initWrapperStyle(): void {
        this.wrapperStyle = computeWrapperStyle(
            parseFocus( this.focus ),
            parseMode( this.mode ),
            parsePlaceholder( this.placeholder ),
            parsePosition( this.position ),
            parseRatio( this.ratio ),
            parseSrc( this.src ),
            this._p.setData
        );
    }
    /**
     * wrapper management
     * compute initial style
     * add (size) observer
     */
    initWrapper(): void {
        // we now have access to the div generated by render method
        this.wrapper = this.wrapperElementRef ? this.wrapperElementRef.nativeElement : undefined;
        this.initWrapperStyle();
        this._p.setWrapper( this.wrapper );
    }
    /**
     * wrapper management (construct and add observer)
     */
    ngOnInit(): void {
        this.initWrapper();
    }
    /**
     * remove size observer on destroy
     */
    ngOnDestroy(): void {
        this._p.delete();
    }

}
